{"version":3,"sources":["../lib/index.ts"],"sourcesContent":["import {\n  makeTextTagProps,\n  CoordinateType,\n  DataType,\n  GetCoordinateType,\n  HandleHoverEvent,\n  MakePathTagType,\n  IterDataType,\n} from \"./type\";\n\n// 참고 ; http://www.gisdeveloper.co.kr/?p=4705\nfunction getCoordinate({ cx, cy, radius, degree }: GetCoordinateType) {\n  degree = (degree * Math.PI) / 180 - (90 * Math.PI) / 180;\n  return {\n    x: cx + radius * Math.cos(degree),\n    y: cy + radius * Math.sin(degree),\n  };\n}\n\nfunction toPieChartItemPath(\n  innerDistanceFromCenter: number,\n  outerDistanceFromCenter: number,\n  startDegree: number,\n  endDegree: number,\n  halfWidth: number\n): { d: string; textCoordinate: CoordinateType } {\n  const cx = halfWidth;\n  const cy = halfWidth;\n\n  const startInner = getCoordinate({\n    cx,\n    cy,\n    radius: innerDistanceFromCenter,\n    degree: startDegree,\n  });\n  const endInner = getCoordinate({\n    cx,\n    cy,\n    radius: innerDistanceFromCenter,\n    degree: endDegree,\n  });\n  const startOuter = getCoordinate({\n    cx,\n    cy,\n    radius: outerDistanceFromCenter,\n    degree: startDegree,\n  });\n  const endOuter = getCoordinate({\n    cx,\n    cy,\n    radius: outerDistanceFromCenter,\n    degree: endDegree,\n  });\n  const arcSweep = endDegree - startDegree <= 180 ? \"0\" : \"1\";\n\n  const d = [\n    [\"M\", startInner.x, startInner.y].join(\" \"),\n    [\"L\", startOuter.x, startOuter.y].join(\" \"),\n    [\n      \"A\",\n      outerDistanceFromCenter,\n      outerDistanceFromCenter,\n      0,\n      arcSweep,\n      1,\n      endOuter.x,\n      endOuter.y,\n    ].join(\" \"),\n    [\"L\", endInner.x, endInner.y].join(\" \"),\n    [\n      \"A\",\n      innerDistanceFromCenter,\n      innerDistanceFromCenter,\n      0,\n      arcSweep,\n      0,\n      startInner.x,\n      startInner.y,\n    ].join(\" \"),\n    \"z\",\n  ].join(\" \");\n\n  const textCoordinate = getCoordinate({\n    cx,\n    cy,\n    radius: (innerDistanceFromCenter + outerDistanceFromCenter) / 2,\n    degree: (startDegree + endDegree) / 2,\n  });\n\n  return { d, textCoordinate };\n}\n\nfunction makePathTag({ fill, d, className }: MakePathTagType) {\n  if (className) {\n    return `<path fill=${fill} d=\"${d}\" class=\"${className}\"></path>`;\n  }\n  return `<path fill=${fill} d=\"${d}\"></path>`;\n}\n\nfunction makeTextTag({\n  text,\n  percentage,\n  coordinate,\n  color,\n  fontSize = 12,\n  className,\n  gap = 12,\n}: makeTextTagProps) {\n  return `\n    <text ${className ? `class=\"${className}\"` : \"\"} text-anchor=\"middle\" x=\"${\n    coordinate.x\n  }\" y=\"${coordinate.y}\" font-size=\"${fontSize}\" fill=\"${color}\">${text}</text>\n    <text ${className ? `class=\"${className}\"` : \"\"} text-anchor=\"middle\" x=\"${\n    coordinate.x\n  }\" y=\"${\n    coordinate.y + gap\n  }\" font-size=\"${fontSize}\" fill=\"${color}\">${percentage}%</text>\n  `;\n}\n\nfunction iterData({\n  data,\n  startDegree,\n  parentDegree,\n  svg,\n  innerDistanceFromCenter,\n  outerDistanceFromCenter,\n  halfWidth,\n  totalDepth,\n}: IterDataType) {\n  let totalDegree = 0;\n  data.forEach((datum) => {\n    if (datum.percentage === 0) {\n      return;\n    }\n\n    const degree = (parentDegree * datum.percentage) / 100;\n    const { d: pathD, textCoordinate } = toPieChartItemPath(\n      innerDistanceFromCenter,\n      outerDistanceFromCenter,\n      startDegree + totalDegree + 0.3,\n      startDegree + totalDegree + degree - 0.3,\n      halfWidth\n    );\n\n    svg.innerHTML +=\n      makePathTag({\n        fill: datum.color,\n        d: pathD,\n        className: datum.data ? \"\" : \"pie_end\",\n      }) +\n      makeTextTag({\n        text: datum.name,\n        percentage: datum.percentage,\n        coordinate: textCoordinate,\n        color: datum.textColor,\n      });\n\n    // halfWidth 250 : pieAreaWidth =\n    const pieAreaWidth = (13.5 * halfWidth) / 25;\n    const maxPieWidth = pieAreaWidth / totalDepth;\n    // halfWidth 250 : gapBetweenInnerOuterPie 10\n    const gapBetweenInnerOuterPie = Math.min(halfWidth / 25, maxPieWidth / 6.5);\n    // halfWidth 250 : pieWidth 55\n    const pieWidth = Math.min(\n      (5.5 * halfWidth) / 25,\n      (maxPieWidth * 5.5) / 6.5\n    );\n    if (datum.data) {\n      iterData({\n        data: datum.data,\n        startDegree: startDegree + totalDegree + 0.3,\n        parentDegree: degree,\n        svg,\n        innerDistanceFromCenter:\n          outerDistanceFromCenter + gapBetweenInnerOuterPie,\n        outerDistanceFromCenter: outerDistanceFromCenter + pieWidth,\n        halfWidth,\n        totalDepth,\n      });\n    }\n\n    totalDegree += degree;\n  });\n}\n\nfunction handleHoverEvent({ event, svg, halfWidth }: HandleHoverEvent) {\n  const path = (event.target as HTMLElement).closest(\"path\");\n  if (path) {\n    const name = (path.nextSibling?.nextSibling as HTMLElement).innerHTML;\n    const percentage = Number(\n      (\n        path.nextSibling?.nextSibling?.nextSibling?.nextSibling as HTMLElement\n      ).innerHTML.replace(\"%\", \"\")\n    );\n\n    const oldChild = svg.querySelectorAll(\".center_text\");\n    oldChild.forEach((child: any) => svg.removeChild(child));\n\n    svg.innerHTML += makeTextTag({\n      text: name,\n      percentage,\n      coordinate: { x: halfWidth, y: halfWidth },\n      color: \"black\",\n      fontSize: (1.8 * halfWidth) / 25,\n      className: \"center_text\",\n      gap: 24,\n    });\n  }\n}\n\nfunction makePieChart(data: DataType[], depth: number, width: number = 500) {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const halfWidth = width / 2;\n  svg.setAttribute(\"width\", String(width));\n  svg.setAttribute(\"height\", String(width));\n\n  const circleRadius = (7 * halfWidth) / 25;\n  const circle = `<circle cx=\"${halfWidth}\" cy=\"${halfWidth}\" r=\"${circleRadius}\" fill=\"#ddd\"></circle>`;\n  svg.innerHTML = circle;\n\n  // halfWidth 250 : innerDistanceFromCenter 85\n  const innerDistanceFromCenter = (8.5 * halfWidth) / 25; // first pie inner distance from center\n  // halfWidth 250 : outerDistanceFromCenter 115\n  const outerDistanceFromCenter = (11.5 * halfWidth) / 25; // first pie outer distance from center\n\n  iterData({\n    data,\n    startDegree: 0,\n    parentDegree: 360,\n    svg,\n    innerDistanceFromCenter,\n    outerDistanceFromCenter,\n    halfWidth,\n    totalDepth: depth - 1,\n  });\n\n  svg.addEventListener(\"mouseover\", (event) =>\n    handleHoverEvent({ event, svg, halfWidth })\n  );\n\n  return svg;\n}\n\nexport default makePieChart;\n"],"mappings":"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","names":[]}